import React, { Component } from 'react';
import {connect} from 'react-redux';
import i18next from "i18next";

import {
    fetchWeathers
} from 'actions';

class WeatherDisplay extends Component {
    constructor() {
        super();
        this.state = {
            weatherData: null,
            units: 'imperial',
            windSpeedUnit: 'mi/hr',
            temperatureUnit: 'F',
        };
    }

    componentDidMount() {
        this.props.fetchWeathers(this.props.zip, this.state.units);
    }

    handleChangeUnits = (event) => {
        this.setState({units: event.target.value});
        this.setState({windSpeedUnit: (event.target.value === 'imperial') ? 'mi/hr' : 'm/s'});
        this.setState({temperatureUnit: (event.target.value === 'imperial') ? 'F' : 'C'});
        this.props.fetchWeathers(this.props.zip, event.target.value);
    };

    render() {


        if (!this.props.weather.base) return <div>Loading</div>;
        const weatherData = this.props.weather;
        const weather = this.props.weather.weather[0];
        const iconUrl = "http://openweathermap.org/img/w/" + weather.icon + ".png";
        return (
            <div>
                <h1>
                    {i18next.t(weather.main)} {i18next.t('in')} {weatherData.name}
                    <img src={iconUrl} alt={weatherData.description} />
                </h1>
                <p>{i18next.t('Current')}: {weatherData.main.temp}°{this.state.temperatureUnit} </p>
                <p>{i18next.t('High')}: {weatherData.main.temp_max}°{this.state.temperatureUnit} </p>
                <p>{i18next.t('Low')}: {weatherData.main.temp_min}°{this.state.temperatureUnit} </p>
                <p>{i18next.t('Wind Speed')}: {weatherData.wind.speed} {this.state.windSpeedUnit} </p>


                {/*TODO:Add in configurate "select units"*/}
                {i18next.t('Change units')}:
                <select value={this.state.value} onChange={this.handleChangeUnits}>
                    <option value="imperial">{i18next.t('Imperial')}</option>
                    <option value="metric">{i18next.t('Metric')}</option>
                </select>
            </div>
        );
    }
}

function mapStateToProps (state) {
    return {
        weather: state.weather
    }
}

const mapDispatchToProps = {
    fetchWeathers
};

export default connect(mapStateToProps, mapDispatchToProps)(WeatherDisplay);